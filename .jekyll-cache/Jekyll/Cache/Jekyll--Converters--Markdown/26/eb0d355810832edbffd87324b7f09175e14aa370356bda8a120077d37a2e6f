I"Ê<p>This paper provides a high-level overview of Google‚Äôs cluster manager: Borg. The paper describes the data warehouse environment, Borg‚Äôs architecture, and discusses performance related choices in more detail.</p>

<h3 id="googles-datacenter-environment">Google‚Äôs Datacenter Environment</h3>

<p>Services and user work is submitted to Google clusters via notion of ‚Äújobs‚Äù, which consistent of one or more tasks which all run the same binary. Jobs are assigned an integer priority level within non-overlapping bands. The lowest priority of jobs are <code class="highlighter-rouge">best effort</code>, followed by <code class="highlighter-rouge">batch</code>, <code class="highlighter-rouge">production</code>, and <code class="highlighter-rouge">monitoring</code>. Each task within a job has an associated set of both hard and soft constraints, mainly relating to resources such as CPU cores, memory requirements, disk space, disk I/O rate, and network I/O. All jobs (and machines) are monitored and suppored by a web-used user interface to track jobs, cells, and tasks, similar to <a href="https://dl.acm.org/doi/abs/10.14778/1920841.1920886">Dremel</a>.</p>

<h3 id="architecture">Architecture</h3>

<p><img src="/images/papers/borg.png" alt="Borg Architecture" /></p>

<p>At the highest level, Borg is decomposed into cells. Cells are essentially clusters of about 10K machines, and may be hetergenous. Each cell maintains a ‚ÄúBorgmaster‚Äù which consists of a main process and scheduler process which is replicated for reliability. The scheduler operates in a round robin fashion within priority bands. Machine assignment operates similar to [Sparrow], but checks a variable number machines, computing scores for equivalence classes. Jobs are then scheduled based on their cached eqivalence class score. For a 10,000 machine cell, a Borgmaster still fits inside a single node comfortably. Interestingly, best-fit packing can be suboptimal as a misprediction can result in the need for preemption. Nevertheless, Borg supports preemption of lower priority tasks for higher priority tasks. At the machine level, a ‚ÄúBorglet‚Äù maintains monitor the machine and current tasks, as well as provides a heartbeat to the Borg master. The smallest unit in the architecture is an <em>alloc</em>, a reserved set of resources for one ot more tasks, and can be grouped across machines.</p>

<h3 id="performance-analysis">Performance Analysis</h3>

<p>The paper covers some specifics on design choices and the respective impacts on performance, I won‚Äôt conver all of them in detail. The first experiment aims at understanding the efficiency. The problem is analyzed through the lens of answering the question: could we remove machines and still maintain the performance? Their CDF shows about to achieve 90% confidence, there is only about 5% overhead. Secondly, cells are shared between <code class="highlighter-rouge">prod</code> and <code class="highlighter-rouge">non-prod</code> workloads which results in better resource utilization. In fact, diverse applications generally led to better CPI. To ensure priority levels and job resources are enforced, Borg tasks run inside a Linux cgroup-based container. This allows the OS to control CPU and memory use for individual tasks. Note that soft interfence (memory bandwidth, cache pollution) is not accounted for. When tasks exceed their <em>non-compressable resources</em> (e.g. memory use), they must be killed, whereas <em>compressible resouces</em> (e.g. disk I/O rate) can be controlled via time multiplexing.</p>

<h3 id="key-insights">Key Insights</h3>
<ul>
  <li>Small units of abstraction, such as <em>allocs</em> are useful for tracking and managing resources and tasks</li>
  <li>Significant investment is monitoring and analysis is critical. Note that monitor jobs have a higher priority and production tasks!</li>
  <li>A cluster manager is in many ways equivalent to the kernel of an OS</li>
  <li>Cluster management is holistic: it includes managing task lifecycles, guaranteeing availability, naming, loading balancing and more.</li>
</ul>

<p>Future readings in the Space:</p>
<ul>
  <li><a href="https://www.usenix.org/conference/osdi14/technical-sessions/presentation/boutin">Apollo</a>, Microsoft‚Äôs cluster manager. Per-job schedulers</li>
  <li><a href="http://eprints.whiterose.ac.uk/91136/">Fuxi</a>, Alibab‚Äôs cluster manager, resource offering.</li>
  <li><a href="https://engineering.fb.com/data-center-engineering/tupperware/">Tupperware</a>, Facebook‚Äôs container scheduling service</li>
</ul>

:ET